# -*- coding: utf-8 -*-
"""Tupro 2 - Fuzzy | Kelompok 17 - IF4401

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iHgVa3f0uhv59C2JbT2fJk1plC5pYdAw

**LINGUISTIK**

Servis (1 - 100)
*   Buruk = 1 - 30
*   Biasa = 40 - 60
*   Bagus = 70 - 100

Harga (1 - 10)
*   Murah  = 1 - 3
*   Normal = 4 - 7
*   Mahal  = 8 - 10

Penilaian
*   Tidak Direkomendasikan
*   Direkomendasikan
"""

pip install XlsxWriter

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import xlsxwriter

"""Membaca Data dari File"""

def importData():
  dataBengkel = []
  data = pd.read_excel("bengkel.xlsx")
  for i in range(len(data['id'])):
    dataBengkel.append([])
    dataBengkel[i].append(data['id'][i])
    dataBengkel[i].append(data['servis'][i])
    dataBengkel[i].append(data['harga'][i])
  return dataBengkel

data = pd.read_excel('bengkel.xlsx')
data

"""Grafik"""

def servis():
  #buruk
  x1 = [0, 30, 40, 100]
  y1 = [1, 1, 0, 0]

  #biasa
  x2 = [0, 30, 40, 60, 70, 100]
  y2 = [0, 0, 1, 1, 0, 0]

  #bagus
  x3 = [0, 60, 70, 100]
  y3 = [0, 0, 1, 1]

  plt.plot(x1, y1, 'red', label = "Buruk")
  plt.plot(x2, y2, 'green', label = "Biasa")
  plt.plot(x3, y3, 'blue', label = "Bagus")

  plt.title("Kualitas Servis")
  plt.legend()
  plt.xticks(np.arange(min(x1), max(x1)+1, 10.0))
  plt.show()

def harga():
  #murah
  x1 = [0, 3, 5, 10]
  y1 = [1, 1, 0, 0]

  # #normal
  x2 = [0, 3, 5, 7, 9, 10]
  y2 = [0, 0, 1, 1, 0, 0]

  # #mahal
  x3 = [0, 7, 9, 10]
  y3 = [0, 0, 1, 1]

  plt.plot(x1, y1, 'red', label = "Murah")
  plt.plot(x2, y2, 'green', label = "Normal")
  plt.plot(x3, y3, 'blue', label = "Mahal")

  plt.title("Harga")
  plt.legend()
  plt.xticks(np.arange(min(x1), max(x1)+1, 1.0))
  plt.show()

def nilaiKelayakan():
  #tidak direkomendasikan
  x1 = [0, 50, 70, 100]
  y1 = [1, 1, 0, 0]

  #direkomendasikan
  x2 = [0, 50, 70, 100]
  y2 = [0, 0, 1, 1]

  plt.plot(x1, y1, 'red', label="Tidak Direkomendasikan")
  plt.plot(x2, y2, 'green', label="Direkomendasikan")

  plt.title("Penilaian")
  plt.legend()
  plt.show()

"""Fuzzifikasi"""

servis()

def fuzzyServis(NS):
  
  #buruk
  if (NS <= 30):
    buruk = 1
  elif (NS >= 40):
    buruk = 0
  elif (NS > 30 and NS < 40):
    buruk = (40 - NS) / (40 - 30)
  
  #biasa
  if (NS <= 30 or NS >= 70):
    biasa = 0
  elif (NS >= 40 and NS <= 60):
    biasa = 1
  elif (NS > 30 and NS < 40):
    biasa = (NS - 30) / (40 - 30)
  elif (NS > 60 and NS < 70):
    biasa = (70 - NS) / (70 - 60)
  
  #bagus
  if (NS <= 60):
    bagus = 0
  elif (NS >= 70):
    bagus = 1
  elif (NS > 60 and NS < 70):
    bagus = (NS - 60) / (70 - 60)

  return round(buruk, 3), round(biasa, 3), round(bagus, 3)

harga()

def fuzzyHarga(NH):
  
  #murah
  if (NH <= 3):
    murah = 1
  elif (NH >= 5):
    murah = 0
  elif (NH > 3 and NH < 5):
    murah = (5 - NH) / (5 - 3)
  
  #normal
  if (NH <= 3 or NH >= 8):
    normal = 0
  elif (NH >= 5 and NH <= 7):
    normal = 1
  elif (NH > 3 and NH < 5):
    normal = (NH - 3) / (5 - 3)
  elif (NH > 7 and NH < 9):
    normal = (9 - NH) / (9 - 7)
  
  #mahal
  if (NH <= 7):
    mahal = 0
  elif (NH >= 9):
    mahal = 1
  elif (NH > 7 and NH < 9):
    mahal = (NH - 7) / (9 - 7)
  
  return round(murah, 3), round(normal, 3), round(mahal, 3)

"""Aturan Inferensi"""

def fuzzyRules(servis, harga):
  arrRules = [
              #Buruk, Murah
              ['Direkomendasikan', min(servis[0], harga[0])],
              #Buruk, Normal
              ['Tidak Direkomendasikan', min(servis[0], harga[1])],
              #Buruk, Mahal
              ['Tidak Direkomendasikan', min(servis[0], harga[2])],
              #Biasa, Murah
              ['Direkomendasikan', min(servis[1], harga[0])],
              #Biasa, Normal
              ['Direkomendasikan', min(servis[1], harga[1])],
              #Biasa, Mahal
              ['Tidak Direkomendasikan', min(servis[1], harga[2])],
              #Bagus, Murah
              ['Direkomendasikan', min(servis[2], harga[0])],
              #Bagus, Normal
              ['Direkomendasikan', min(servis[2], harga[1])],
              #Bagus, Mahal
              ['Direkomendasikan', min(servis[2], harga[2])]
            ]
            
  return arrRules

def inferensi(arrRules):
  arrDirekomendasikan = []
  arrTidakDirekomendasikan = []

  for i in range(len(arrRules)):
    if(arrRules[i][0] == "Direkomendasikan"):
      arrDirekomendasikan.append(arrRules[i][1])
    elif(arrRules[i][0] == "Tidak Direkomendasikan"):
      arrTidakDirekomendasikan.append(arrRules[i][1])
  
  return max(arrDirekomendasikan), max(arrTidakDirekomendasikan)

"""Metode Defuzzifikasi Mamdani"""

def defuzzifikasi(arrInference):
  kiri = 0
  kanan = 0
  total = 0
  mamdani = [10,20,30,40,50,60,70,80,90,100]
  for i in range(len(mamdani)):
    if(mamdani[i] <= 50):
      kiri = kiri + mamdani[i] * arrInference[0]
      total = total + arrInference[0]
    elif(mamdani[i] >= 70):
      kanan = kanan + mamdani[i] * arrInference[0]
      total = total + arrInference[1]
    
  return (kanan+kiri)/total

"""Pengurutan 10 Terbaik"""

def top10(arrResult):
  arrTemp = []
  arr = arrResult[:]
  arr = sorted(arr, key=lambda x: x[1], reverse=True)

  for i in range(10):
    arrTemp.append(arr[i])
  return arrTemp

"""Program Utama"""

# Membaca file dan dimasukkan ke dalam dataBengkel
dataBengkel = importData()

# Grafik 
servis()
print()
harga()
print()
nilaiKelayakan()
print()

# Proses Fuzifikasi untuk kualitas servis
arrFuzzyServis = []
for i in range(len(dataBengkel)):
  arrFuzzyServis.append(fuzzyServis(dataBengkel[i][1]))

# Proses Fuzifikasi untuk harga
arrFuzzyHarga = []
for i in range(len(dataBengkel)):
  arrFuzzyHarga.append(fuzzyHarga(dataBengkel[i][2]))

# Proses mendapatkan nilai defuzifikasi
arrFinalResult = []
for i in range(len(dataBengkel)):
  # Mendapat aturan untuk melakukan inferensi
  fuzzy = fuzzyRules(arrFuzzyServis[i], arrFuzzyHarga[i])
  # Mendapatkan nilai kelayakan untuk di hitung dalam defuzzifikasi
  infer = inferensi(fuzzy)
  # Mendapatkan nilai defuzzifikasi
  arrFinalResult.append([i+1, defuzzifikasi(infer)])

# Score tiap id bengkel
for i in range(len(arrFinalResult)):
  print("----------------------------------------")
  print('|id:', arrFinalResult[i][0], '  | score: ', arrFinalResult[i][1])
  print("----------------------------------------")
 

# Mendapatkan 10 bengkel terbaik
arrFinalResult = top10(arrFinalResult)

# 10 Bengkel terbaik
print("\n\nTOP 10")
for i in range(len(arrFinalResult)):
  print("---------------------------")
  print('|id:', arrFinalResult[i][0], '    | score: ', arrFinalResult[i][1], '|')
 
# Pembuatan file excel
workbook = xlsxwriter.Workbook('peringkat.xlsx')
worksheet = workbook.add_worksheet("Hasil Fuzzy")
worksheet.write(0,0,'id')
worksheet.write(0,1,'score')

# Memasukkan hasil 10 bengkel terbaik ke file excel
for i in range(len(arrFinalResult)):
  worksheet.write(i+1, 0, arrFinalResult[i][0])
  worksheet.write(i+1, 1, arrFinalResult[i][1])

workbook.close()

